from fbtor.FBoolectorTypes import FPType, RMode

t = FPType.single
d = FPType.double
r = RMode.to_zero
n = RMode.to_nearest

subnormal = [
("2E-310","0","00000000000","0000001001001101000100010110111000011100110001010110",FPType.double,RMode.to_nearest),
("7E-322","0","00000000000","0000000000000000000000000000000000000000000010001110",FPType.double,RMode.to_nearest),
("9e-315","0","00000000000","0000000000000000000001101100100100111011100000111000",FPType.double,RMode.to_nearest),
("3e-323","0","00000000000","0000000000000000000000000000000000000000000000000110",FPType.double,RMode.to_nearest),
("1E-45"       , "0","00000000"   ,"00000000000000000000001",FPType.single,RMode.to_nearest),
("1.1754942E-38","0","00000000"   ,"11111111111111111111111",FPType.single,RMode.to_nearest),
("-3.72E-40","1","00000000","00001000000110011111100",t,n),
("+3.72E-40","0","00000000","00001000000110011111100",t,n)
]

small= [
("+0"       ,"0","00000000","00000000000000000000000",t,n),
("-0"       ,"1","00000000","00000000000000000000000",t,n),
("+2.17e-4" ,"0","01110010","11000111000101001111110",t,n),
("-2.17e-4" ,"1","01110010","11000111000101001111110",t,n),
("7E-305"  ,"0","00000001100","1000100100111110110100001100100000001000111011000110",FPType.double,RMode.to_nearest),
("-3E-308" ,"1","00000000001","0101100100101000001101101000010011011011101001110111",FPType.double,RMode.to_nearest),
("5E-38"   ,"0","00000011","00010000001110011101010",FPType.single,RMode.to_nearest),
("1.18E-38","0","00000001","00000000111110110011001",FPType.single,RMode.to_nearest),
("1e-40"    ,"0","011111101111010","0001011011000010011000100111011101110101011110011100010110001100",FPType.extended,n)
]

large= [
("-1.75E308","1","11111111110","1111001001101010101000101010010111001001111100011000",d,n),
("+1.75E308","0","11111111110","1111001001101010101000101010010111001001111100011000",d,n),
(  "3E307" ,"0","11111111100","0101010111000101011101101101100000010101011100100110",FPType.double,RMode.to_nearest),
("-3.2e307","1","11111111100","0110110010001110010111001010001000111001000000101001",FPType.double,RMode.to_nearest),
("3E38"    ,"0","11111110","11000011011000111100110",FPType.single,RMode.to_nearest),
("-3.2E38" ,"1","11111110","11100001011110111000010",FPType.single,RMode.to_nearest),
("-1.25e200","1","100001010010111","1010001000001101111100001101110011010011101011110000101110010000",FPType.extended,n),
('-inf'     ,"1","11111111","00000000000000000000000",t,n),
("+inf"     ,"0","11111111","00000000000000000000000",t,n)
]

normal= [
("+5.12e3"  ,"0","10001011","01000000000000000000000",t,n),
("-5.12e3"  ,"1","10001011","01000000000000000000000",t,n),
("+0.1",    "0","01111111011","1001100110011001100110011001100110011001100110011010",FPType.double,RMode.to_nearest),
("-64" ,    "1","10000000101","0000000000000000000000000000000000000000000000000000",FPType.double,RMode.to_nearest),
("1024"  ,  "0","10001001","00000000000000000000000",FPType.single,RMode.to_nearest),
("-0.005",  "1","01110111","01000111101011100001010",FPType.single,RMode.to_nearest)
]

#build test cases for fSign/fExponent/fMantisse
set_fSign = []
set_fExponent = []
set_fMantisse = []
for (val,s,e,m,fptype,rmode) in subnormal+small+large+normal:
    set_fSign.append((val,s,fptype,rmode))
    set_fExponent.append((val,e,fptype,rmode))
    set_fMantisse.append((val,m,fptype,rmode))

#some more possible test-values
#test_val = ["256.000000000000000000000000000000000030518","-3e-39","1.175E-38","1.176e-38","3.4e38",
#            "1.7976931348623157E308","3.45e38","1.797693134e308","-1.797693135e308","1.000000000000001", ,"1e200","12345671561654e8",
#            "-876987411112e-7","45e-2","9231e-4","-23e3",,"12325e-2","1.00000003","3e-8", "2e-10","1e-15","2.56e-28","4.8e-51","-3e-300"]
